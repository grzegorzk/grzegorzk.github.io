{"version":3,"sources":["xhr_loader.js","App.js","index.js"],"names":["xhr_load_script","url","callback","method","is_async","includes","toUpperCase","Error","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","script","document","createElement","innerHTML","responseText","querySelector","appendChild","setTimeout","open","send","App","props","updateSigninStatus","setState","logged_in","render","className","style","state","display","onClick","gapiOAuth","passwords","encrypted_pwd","initGapi","window","gapi","client","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","isSignedIn","listen","this","get","error","alert","JSON","stringify","load","React","Component","ReactDOM","getElementById"],"mappings":"6MAuBeA,MAvBf,SAAyBC,EAAKC,GAAwC,IAA9BC,EAA6B,uDAAtB,MAAOC,IAAe,yDACjE,IAAO,CAAC,MAAO,OAAQ,QAAQC,SAASF,EAAOG,eAC3C,MAAM,IAAIC,MAAM,2BAGpB,IAAIC,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,WACrB,GAAIF,EAAIG,aAAeF,eAAeG,KAAM,CACxC,GAAmB,MAAfJ,EAAIK,OAAgB,CACpB,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAOG,UAAYT,EAAIU,aACvBH,SAASI,cAAc,QAAQC,YAAYN,GAExB,oBAAZZ,GACPmB,WAAW,WAAWnB,EAASM,EAAIU,aAAcV,EAAIK,OAAQL,IAAO,KAKhFA,EAAIc,KAAKnB,EAAQF,EAAKG,GACtBI,EAAIe,QCsCOC,E,YAtDX,WAAYC,GAAQ,IAAD,uBACf,4CAAMA,KA2BVC,mBAAqB,SAACb,GAClB,EAAKc,SAAS,CACVC,UAAWf,KA9BA,EAiCnBgB,OAAS,WACL,OACI,6BACI,wBAAIC,UAAU,yCAAd,aAGA,4BAAQA,UAAU,sBACVC,MAAQ,EAAKC,MAAMJ,UAAY,CAACK,QAAS,QAAU,CAACA,QAAS,SAC7DC,QAAU,EAAKC,WAFvB,yCAvCO,EA+CnBA,UAAY,WACR,EAAKR,SAAS,CACVC,WAAW,KA/Cf,EAAKI,MAAQ,CACTJ,WAAW,EACXQ,UAAW,CAAC,CAACnC,IAAK,cAAeoC,cAAe,IAC5C,CAACpC,IAAK,cAAeoC,cAAe,IACpC,CAACpC,IAAK,cAAeoC,cAAe,IACpC,CAACpC,IAAK,cAAeoC,cAAe,MAG5C,IAAIC,EAAW,WACXC,OAAOC,KAAKC,OAAOC,KAAK,CACpBC,OAAQ,0CACRC,SAAU,2EACVC,cAAe,CAAC,4DAChBC,MAAO,0DACRC,KAAK,WAEJR,OAAOC,KAAKQ,MAAMC,kBAAkBC,WAAWC,OAAOC,KAAK1B,oBAG3D0B,KAAK1B,mBAAmBa,OAAOC,KAAKQ,MAAMC,kBAAkBC,WAAWG,QACxE,SAASC,GACRC,MAAMC,KAAKC,UAAUH,EAAO,KAAM,OAvB3B,OA0BftD,EAAgB,oCAAqC,WAAWuC,OAAOC,KAAKkB,KAAK,eAAgBpB,KA1BlF,E,2BADLqB,IAAMC,W,MCGxBC,IAAShC,OAAO,kBAAC,EAAD,MAASd,SAAS+C,eAAe,U","file":"static/js/main.cbea64ea.chunk.js","sourcesContent":["function xhr_load_script(url, callback, method=\"GET\", is_async=true) {\n    if ( ! [\"GET\", \"POST\", \"HEAD\"].includes(method.toUpperCase()) ) {\n        throw new Error(\"Unhandled method passed\");\n    }\n\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function() {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n            if (xhr.status === 200) {\n                var script = document.createElement(\"script\");\n                script.innerHTML = xhr.responseText;\n                document.querySelector(\"head\").appendChild(script);\n            }\n            if (typeof callback != \"undefined\") {\n                setTimeout(function(){callback(xhr.responseText, xhr.status, xhr)}, 0);\n            }\n        }\n    };\n\n    xhr.open(method, url, is_async);\n    xhr.send();\n}\n\nexport default xhr_load_script;\n","import React from \"react\";\nimport xhr_load_script from \"./xhr_loader\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            logged_in: false,\n            passwords: [{url: \"example.com\", encrypted_pwd: \"\"},\n                {url: \"example.com\", encrypted_pwd: \"\"},\n                {url: \"example.com\", encrypted_pwd: \"\"},\n                {url: \"example.com\", encrypted_pwd: \"\"}]\n        }\n\n        var initGapi = function() {\n            window.gapi.client.init({\n                apiKey: \"AIzaSyDc2p7qtGXbPyr9qaR6poitd8o-eHhRXxM\",\n                clientId: \"693421068041-8v4j719d0cg5dek8ab2elmen2mqe33b8.apps.googleusercontent.com\",\n                discoveryDocs: [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\n                scope: \"https://www.googleapis.com/auth/spreadsheets.readonly\"\n            }).then(function () {\n                // Listen for sign-in state changes.\n                window.gapi.auth2.getAuthInstance().isSignedIn.listen(this.updateSigninStatus);\n\n                // Handle the initial sign-in state.\n                this.updateSigninStatus(window.gapi.auth2.getAuthInstance().isSignedIn.get());\n            }, function(error) {\n                alert(JSON.stringify(error, null, 2));\n            });\n        };\n        xhr_load_script(\"https://apis.google.com/js/api.js\", function(){window.gapi.load('client:auth2', initGapi)});\n    }\n    updateSigninStatus = (status) => {\n        this.setState({\n            logged_in: status\n        });\n    }\n    render = () => {\n        return (\n            <div>\n                <h4 className=\"bg-primary text-white text-center p-2\">\n                    Passwords\n                </h4>\n                <button className=\"btn btn-primary m-2\"\n                        style={ this.state.logged_in ? {display: \"none\"} : {display: \"block\"} }\n                        onClick={ this.gapiOAuth }>\n                    Authenticate to your google account\n                </button>\n            </div>\n        )\n    }\n    gapiOAuth = () => {\n        this.setState({\n            logged_in: true\n        })\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}